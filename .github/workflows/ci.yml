name: CI

on:
  push:
    branches: [ master ]
  # TODO: temporary for faster tests, restore!
  # pull_request:
  #   branches: [ master ]

jobs:
  android:
    # runs-on: ubuntu-latest
    runs-on: macos-14

    # outputs:
    #   built-apk: ${{ steps.buildApk.outputs.apkPath }}

    steps:
      - name: checkout
        uses: actions/checkout@v4

      # - name: Enable KVM
      #   run: |
      #     echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
      #     sudo udevadm control --reload-rules
      #     sudo udevadm trigger --name-match=kvm
      
      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3
        
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-29
          # key: avd-${{ matrix.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          # api-level: ${{ matrix.api-level }}
          api-level: 29
          # arch: arm64-v8a
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      # - name: run tests
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: 29
          # script: ./gradlew connectedCheck

      # - name: run tests
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     # api-level: ${{ matrix.api-level }}
      #     api-level: 29
      #     arch: arm64-v8a
      #     force-avd-creation: false
      #     emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
      #     disable-animations: true
      #     script: ./gradlew connectedCheck

      - name: 'Set up JDK'
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin' # This is Eclipse Temurin, you can change it to your preferred distribution
          java-version: '17'

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Check Flutter version
        run: flutter doctor -v
      - name: Get all packages Flutter
        run: flutter pub get
      - name: Flutter Build debug APK
        id: buildApk
        run: flutter build apk --debug --dart-define=FORCE_CAPTURE_MODE=false

      - name: Setup Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      
      - name: Install TestSweets
        run: |
          brew tap filledstacks/tap
          brew install testsweets
      
      # - name: Start Emulator # TODO: Currently we have to find the Alternative for this only
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: 29
      #     arch: arm64-v8a
      #     emulator-boot-timeout: 20000
      #     script: ./gradlew connectedCheck

      - name: TestSweets Authenticate
        run: testsweets authenticate -e ${{ secrets.TESTSWEETS_EMAIL_ACCOUNT }} -p ${{ secrets.TESTSWEETS_PASSWORD }}

      - name: Run TestSweets Tests
        run: testsweets run -p qA5ua2TOgxBtMGcSVBGE -a build/app/outputs/flutter-apk/app-debug.apk
  ios:
    runs-on: macos-14 # use macos-14 insted of macos-latest-large as that is based on M1 (  https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#:~:text=N/A-,macOS,N/A,-Standard%20GitHub%2Dhosted ) 

    # outputs:
    #   built-apk: ${{ steps.buildApk.outputs.apkPath }}

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Check Flutter version
        run: flutter doctor -v
        
      - name: Get all packages Flutter
        run: flutter pub get
        
      - name: Flutter Build debug IPA
        id: buildIpa
        run: flutter build ios --debug --simulator --no-codesign --dart-define=FORCE_CAPTURE_MODE=false

      - name: Setup Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      
      - name: Install TestSweets
        run: |
          brew tap filledstacks/tap
          brew install testsweets

      - name: 'Print the devices list'
        run: xcrun simctl list devices available --json

      # install jq - cli tool for json querying
      # retrieve the device .udid to use in tests and store it in env var
      - name: 'Set Up Simulator UUID'
        run: |
          brew install jq &&
          IOS_SIM_UUID=$(xcrun simctl list devices available --json | jq -r '.devices."com.apple.CoreSimulator.SimRuntime.iOS-17-0"[] | select(.name == "iPhone 14") | .udid') &&
          echo "IOS_SIM_UUID=$IOS_SIM_UUID" >> $GITHUB_ENV
      
      - name: 'Print Selected UUID'
        run: echo $IOS_SIM_UUID
      
      - name: Start Emulator and Run TestSweets
        uses: futureware-tech/simulator-action@v3
        with:
          model: 'iPhone 14 Pro'
      
      - name: TestSweets Authenticate
        run: testsweets authenticate -e ${{ secrets.TESTSWEETS_EMAIL_ACCOUNT }} -p ${{ secrets.TESTSWEETS_PASSWORD }}

      - name: Run TestSweets Tests
        run: testsweets run -p qA5ua2TOgxBtMGcSVBGE -a build/ios/iphonesimulator/Runner.app
